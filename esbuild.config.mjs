import esbuild from "esbuild";
import process from "process";
import inlineImportPlugin from "esbuild-plugin-inline-import";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
const web = process.argv[2] === "web" || process.argv.length === 0;

const sharedConfig = {
    banner: {
        js: banner,
    },
    bundle: true,
    platform: "browser",
    target: ["ES6"],
    sourcemap: prod ? false : "inline",
    plugins: [inlineImportPlugin()],
    logLevel: "info",
};

const browserConfig = {
    ...sharedConfig,
    entryPoints: ["browser_extension/browser_extension.ts"],
    format: "iife",
    outdir: "browser_extension/dist",
};

const codemirrorConfig = {
    ...sharedConfig,
    entryPoints: ["codemirror_extension/codemirror_extensions.ts"],
    format: "esm",
    outdir: "codemirror_extension/dist",
};
if (web) {
    const browserCtx = await esbuild.context(browserConfig);
    browserCtx.watch().catch(() => process.exit(1));
} else if (!prod && !web) {
    console.log("Running in development mode, watching for changes...");
    const codemirrorCtx = await esbuild.context(codemirrorConfig);
    codemirrorCtx.watch().catch(() => process.exit(1));
} else {
    esbuild.build(browserConfig).catch(() => process.exit(1));
    esbuild.build(codemirrorConfig).catch(() => process.exit(1));
}
